# empty
apiVersion: tekton.dev/v1beta1
kind: EventListener
metadata:
  name: build
spec:
  triggers:
  - binding:
      name: pipeline-BUILD
    template:
      name: tt-common
---
apiVersion: tekton.dev/v1beta1
kind: TriggerBinding
metadata:
  name: pipeline-build
spec:
  params:
  - name: script
    value: ./scripts/pipeline-BUILD.sh
---
apiVersion: tekton.dev/v1beta1
kind: TriggerTemplate
metadata:
  name: tt-common
spec:
  params:
  - name: script
  resourcetemplates:
  - apiVersion: tekton.dev/v1beta1
    kind: PipelineRun
    metadata:
      name: pipelinerun-$(uid)
    spec:
      pipelineRef:
        name: pipeline-input-parameter-variable
      workspaces:
      - name: pipeline-workspace
        emptyDir: {}
      params:
      - name: script
        value: $(params.script)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: pipeline-input-parameter-variable
spec:
  workspaces:
  - name: pipeline-workspace
  params:
  - name: script
  tasks:
  - name: script
    workspaces:
    - name: task-workspace
      workspace: pipeline-workspace
    params:
    - name: script
      value: $(params.script)
    taskRef:
      name: gasket
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: gasket
spec:
  workspaces:
  - name: task-workspace 
    mountPath: /working   
  params:
  - name: script
  steps:
  - name: execute-script
    image: ibmcom/pipeline-base-image
    envFrom:
    - configMapRef:
        name: environment-properties
    - secretRef:
        name: secure-properties     
    env:
    - name: script
      value: $(params.script)
    command: ["/bin/bash", "-c"]
    args:
    - |
      # verify all the required variables are set
      set -u
      for e in GIT_REPO GIT_BRANCH REGISTRY_REGION_ID REGISTRY_NAMESPACE TARGET_CLUSTER_NAME IMAGE_NAME TARGET_REGION_ID TARGET_NAMESPACE TARGET_RESOURCE_GROUP COS_PLAN APP_ID_PLAN CLOUDANT_PLAN script; do
        eval "echo $e="'$'$e
      done
      set +u
      cd /working
      # Builder type: Container Registry, initializes this default
      export ARCHIVE_DIR=.
      # Builder type: Kubernetes expects the ibmcloud cli to be connected to the cluster and the
      # environment exported below.  The ibmcloud cli region could be initialized to the toolchain
      # region instead of the kubernets cluster region
      export PIPELINE_KUBERNETES_CLUSTER_NAME="$TARGET_CLUSTER_NAME"
      ibmcloud config --check-version false
      ibmcloud login -r $TARGET_REGION_ID -g $TARGET_RESOURCE_GROUP --apikey $API_KEY
      ibmcloud ks cluster config --cluster $TARGET_CLUSTER_NAME
      # REGISTRY_URL is based on TARGET_REGION_ID, parse the output of the cr api command, the echo
      # removes the new lines expect: s="Registry API endpoint https://us.icr.io/api OK"
      r='.*https://([^/]*)'
      ibmcloud cr api; # just to see
      s=$(echo $(ibmcloud cr api))
      [[ $s =~ $r ]]
      export REGISTRY_URL=${BASH_REMATCH[1]}
      if [ -z $GIT_BRANCH ]; then
        git clone -q $GIT_REPO .
      else
        git clone -q -b $GIT_BRANCH $GIT_REPO .
      fi
      env | sort
      for s in $script; do
        echo $s - START
        if $s; then
          echo $s - SUCCESS
        else
          echo $s - FAILED
        fi
      done
